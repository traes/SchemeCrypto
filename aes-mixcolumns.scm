;file mixcolumns.scm
        
(define (mix-columns-encrypt state-old)
  (define state-new (make-state))
  (define (iter col)
     (if (> col 3)
        state-new
        (let* ((column ((state-old 'get-column) col))
               (element (lambda(index)
                          ((column 'get-element) index))))
          ((state-new 'set-byte!)
           0 col (xor-bytes (multiply-gf256 (hex->byte "02") (element 0))
                            (multiply-gf256 (hex->byte "03") (element 1))
                            (element 2)
                            (element 3)))
          ((state-new 'set-byte!)
           1 col (xor-bytes (element 0)
                      (multiply-gf256 (hex->byte "02") (element 1))
                      (multiply-gf256 (hex->byte "03") (element 2))
                      (element 3)))
          ((state-new 'set-byte!)
           2 col (xor-bytes (element 0)
                            (element 1)
                            (multiply-gf256 (hex->byte "02") (element 2))
                            (multiply-gf256 (hex->byte "03") (element 3))))
          ((state-new 'set-byte!)
           3 col (xor-bytes (multiply-gf256 (hex->byte "03")(element 0))
                            (element 1)
                            (element 2)
                            (multiply-gf256 (hex->byte "02")(element 3))))
          (iter (+ col 1)))))       
  (iter 0))
    
(define (mix-columns-decrypt state-old)
  (define state-new (make-state))
  (define (iter col)
     (if (> col 3)
        state-new
        (let* ((column ((state-old 'get-column) col))
               (element (lambda(index)
                          ((column 'get-element) index))))
          ((state-new 'set-byte!)
           0 col (xor-bytes (multiply-gf256 (hex->byte "0e") (element 0))
                            (multiply-gf256 (hex->byte "0b") (element 1))
                            (multiply-gf256 (hex->byte "0d") (element 2))
                            (multiply-gf256 (hex->byte "09") (element 3)))) 
          ((state-new 'set-byte!)
           1 col (xor-bytes (multiply-gf256 (hex->byte "09") (element 0))
                            (multiply-gf256 (hex->byte "0e") (element 1))
                            (multiply-gf256 (hex->byte "0b") (element 2))
                            (multiply-gf256 (hex->byte "0d") (element 3))))
          ((state-new 'set-byte!)
           2 col (xor-bytes (multiply-gf256 (hex->byte "0d") (element 0))
                            (multiply-gf256 (hex->byte "09") (element 1))
                            (multiply-gf256 (hex->byte "0e") (element 2))
                            (multiply-gf256 (hex->byte "0b") (element 3))))
          ((state-new 'set-byte!)
           3 col (xor-bytes (multiply-gf256 (hex->byte "0b") (element 0))
                            (multiply-gf256 (hex->byte "0d") (element 1))
                            (multiply-gf256 (hex->byte "09") (element 2))
                            (multiply-gf256 (hex->byte "0e") (element 3))))
          (iter (+ col 1)))))       
  (iter 0))
    